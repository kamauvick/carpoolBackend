# Generated by Django 2.2.5 on 2020-01-13 14:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Demand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available_seats', models.IntegerField()),
                ('departure_time', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('distance', models.CharField(max_length=255)),
                ('complete', models.BooleanField(default=False)),
                ('canceled', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'demand',
                'verbose_name_plural': 'demands',
                'db_table': 'demand',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('lat', models.FloatField()),
                ('lng', models.FloatField()),
            ],
            options={
                'db_table': 'location',
            },
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seats_needed', models.IntegerField()),
                ('departure_time', models.TimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_full', models.BooleanField(default=False)),
                ('is_ended', models.BooleanField(default=False)),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offer_destination', to='WBBackend.Location')),
            ],
            options={
                'verbose_name': 'offer',
                'verbose_name_plural': 'offers',
                'db_table': 'offer',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=200, null=True)),
                ('last_name', models.CharField(max_length=200, null=True)),
                ('phone_number', models.CharField(max_length=100, null=True)),
                ('profile_pic', models.ImageField(blank=True, default='sample.jpg', null=True, upload_to='profile_pics/')),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profile',
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='RequestBoard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PE', 'Pending'), ('AC', 'Accepted'), ('DE', 'Denied')], max_length=2)),
                ('demand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_request', to='WBBackend.Demand')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='WBBackend.Offer')),
            ],
            options={
                'db_table': 'board_request',
            },
        ),
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=200, null=True)),
                ('last_name', models.CharField(max_length=200, null=True)),
                ('username', models.CharField(max_length=200)),
                ('phone_number', models.CharField(max_length=200)),
                ('email', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'userdata',
                'verbose_name_plural': 'userdata',
                'db_table': 'userdata',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=100, null=True)),
                ('refresh_token', models.TextField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TripDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('demand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WBBackend.Demand')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WBBackend.Offer')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WBBackend.RequestBoard')),
            ],
            options={
                'db_table': 'trip_details',
                'ordering': ['offer'],
            },
        ),
        migrations.CreateModel(
            name='TripChat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('time', models.DateTimeField(auto_now=True)),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WBBackend.Offer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WBBackend.Profile')),
            ],
            options={
                'verbose_name': 'tripchat',
                'verbose_name_plural': 'tripchat',
                'db_table': 'tripchat',
            },
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(null=True)),
                ('stop_time', models.TimeField(null=True)),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WBBackend.Offer')),
            ],
            options={
                'db_table': 'trip',
                'ordering': ['offer'],
            },
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='offer',
            name='driver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='driver_profile', to='WBBackend.Profile'),
        ),
        migrations.AddField(
            model_name='offer',
            name='origin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offer_origin', to='WBBackend.Location'),
        ),
        migrations.AddField(
            model_name='demand',
            name='destination',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demand_destination', to='WBBackend.Location'),
        ),
        migrations.AddField(
            model_name='demand',
            name='origin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demand_origin', to='WBBackend.Location'),
        ),
        migrations.AddField(
            model_name='demand',
            name='passenger',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_passenger', to='WBBackend.Profile'),
        ),
    ]
